/*
 * File: app/controller/LoginController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PixonicTeam.controller.LoginController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            loginBtn: '#loginBtn',
            errorLabel: '#loginErrorLabel',
            usernameField: '#emailField',
            passwordField: '#passwordField'
        },

        control: {
            "[action=confirm]": {
                tap: 'onButtonTap'
            }
        }
    },

    onButtonTap: function(button, e, eOpts) {

        var name = this.getUsernameField().getValue();
        var pwd = this.getPasswordField().getValue();

        var usr = Ext.create('PixonicTeam.model.User',{
            email: name + '@pixonic.ru',
            password: pwd,
        });

        var errs = usr.validate();
        var msg = '';
        var email =name+ '@pixonic.ru';

        if (!errs.isValid()) {
            errs.each(function (err) {
                msg += err.getField() + ' : ' + err.getMessage() + '<br/>';
            });
        }

        var errorLbl = this.getErrorLabel();
        errorLbl.setHtml(msg);
        this.checkAuth(false);
    },

    checkAuth: function(immediate) {
        console.log("trying login with immediate " + immediate);
        //var email = this.getUsernameField().getValue() + "@pixonic.ru";
         //   gapi.auth.authorize({client_id: clientId, scope: scopes, login_hint: email, immediate: immediate}, this.handleAuthResult);
        gapi.auth.authorize({client_id: clientId, scope: scopes, immediate: immediate}, this.handleAuthResult);
    },

    handleAuthResult: function(authResult) {
            var authorizeButton = document.getElementById('authorize-button');
            if (authResult && !authResult.error) {
                // authorizeButton.style.visibility = 'hidden';
                // makeApiCall();
             //  var errorLbl = this.getErrorLabel();
               // errorLbl.setHtml("Auth OK: Token "+ authResult.access_token);
                console.log("Auth OK, code, token"+authResult.code + authResult.access_token);
            } else {
                console.log("AUth ERROR"+ authResult.error);
                // errorLbl.setHtml("Auth ERROR:" + authResult.error);
            }
    },

    launch: function() {
        console.log('launch controller');
        gapi.client.setApiKey(apiKey);
         window.setTimeout(this.checkAuth(true),1);
    }

});